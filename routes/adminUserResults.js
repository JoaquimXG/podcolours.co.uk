require('dotenv').config();
const log = require("../logs/logger");
const ejs = require("ejs");
var puppeteer = require("puppeteer");

module.exports = {
    verifyIsAdmin,
    adminUserResults,
    resultsAsPdfOrHtml,
    generateReportPdf
};

function verifyIsAdmin(req, res, next) {
    res.locals.email = req.params.email;

    //Redirect user to homepage if they are not signed in
    if (!req.user) {
        res.redirect("/?loginModal=1");
        log.warn("Access Denied - User not logged in", {
            route: "admin/:email",
            action: "failure",
        });
        return;
    }

    if (!req.user.isAdmin) {
        log.warn("Access Denied - User not admin", {
            route: "admin/:email",
            action: "failure",
        });
        next("Error 403: Access Denied");
        return;
    }
    next();
}

//Generates HTML for a user's results report
//Runs database queries then converts results to html
async function adminUserResults(req, res, next) {
    res.locals.header = {
        logout: true,
        testButton: {
            class: "btn--blue",
            //onClick: `location.href='/adminUserResults/${res.locals.email}?asPdf=1'`,
            onClick: `window.open('/adminUserResults/${res.locals.email}?asPdf=1','_blank')`,
            text: "Get Report",
            id: "pdfButton",
        },
    };

    //Add two query promises to array to be resolved in parallel
    res.locals.queryPromiseArray = [];
    //Query for page content
    res.locals.queryPromiseArray.push(
        req.db
            .collection("content")
            .findOne({ _id: "/" }, { _id: 0, content: 1 })
    );
    //Query for user content
    res.locals.queryPromiseArray.push(
        req.db.collection("users").findOne({ email: res.locals.email })
    );

    //Wait for both promises to resolve without error
    //then render html for report page
    //Otherwise render 500 error page
    await Promise.all(res.locals.queryPromiseArray)
        .then(async (resultsArray) => {
            var content = parseResultsArray(req, res, resultsArray);
            //Renders the report into html, the domain (with host) is included 
            //To ensure that relative links can be followed regardless of which
            //port the app is being run on currently
            res.locals.reportHtml = await ejs.renderFile(
                __dirname + "/../views/pages/adminUserResults.ejs",
                {...content, domain:  `localhost:${process.env.APPPORT}`}
            );
            return;
        })
        .catch((err) => {
            next(err);
        });

    next();
}

//Selecs whether to display results as html report or as PDF
async function resultsAsPdfOrHtml(req, res) {
    if (req.query.asPdf === "1") {
        pdf = await generateReportPdf(res.locals.reportHtml)
        res.contentType("application/pdf")
        res.send(pdf)
    }
    else {
        res.send(res.locals.reportHtml)
    }
}

//Takes html for the report page and converts to PDF using puppeteer
//This is a bit slow honestly and could be improved
//The benefit of this method being that puppeteer will generate the same pdf
//as is generated by printing the page
async function generateReportPdf(html) {
    const browser = await puppeteer.launch({ headless: true, args: ['--disable-dev-shm-usage', "--no-sandbox"] });
    const page = await browser.newPage();
    await page.setContent(`${html}`, { waitUntil: "networkidle0" });
    const pdf = await page.pdf({ format: "A4" });
    await browser.close();
    return pdf;
}

//Parses results of Promises from Database queries ready for input
//to admin results page
function parseResultsArray(_, res, resultsArray) {
    var content = resultsArray[0].content;
    var profile = resultsArray[1];

    return {
        header: res.locals.header,
        content: content,
        profile: profile,
    };
}
